% \iffalse meta-comment
%
%  styledcmd Handle multiple versions for user-defined macros in LaTeX
%  Copyright (C) 2021  Paolo De Donato <dedonato95@hotmail.it>
%
%  This file is part of Styledcmd.
%
%  Styledcmd is free software: you can redistribute it and/or modify
%  it under the terms of the GNU General Public License as published by
%  the Free Software Foundation, either version 3 of the License, or
%  (at your option) any later version.
%
%  Styledcmd is distributed in the hope that it will be useful,
%  but WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%  GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with Styledcmd.  If not, see <https://www.gnu.org/licenses/>.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{styledcmd.dtx}[2022/08/03 1.2 Command with different styles]
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\RequirePackage{expl3}[2022-04-10]
%<package>\ProvidesExplPackage{styledcmd}{2022/08/03}{1.2}{Command with different styles}
%<package>\RequirePackage{lt3rawobjects}[2022-11-26]
%<package>\RequirePackage{xparse}
%<*driver>
\documentclass[full]{l3doc}
\usepackage{styledcmd}
\begin{document}
\DocInput{styledcmd.dtx}
\end{document}
%</driver>
% \fi
%
%\newstyledcmd{\saluto}{informal}[1]{Hi #1}
%\newstyledcmd{\saluto}{formal}[1]{Good morning #1}
%
%\newcommand{\thpkg}{\pkg{styledcmd}}
%
%\title{styledcmd}
%\author{Paolo De Donato}
%\date{03 August 2022}
%
%\maketitle
%
%\begin{documentation}
%
%\thpkg{} is a \LaTeX{} package that allows you to create and manage different versions of your macro in order to be able to choose the better style for every occasion and avoid rewriting code each time.

%\section{How can you include it in your project?}
%You need only to have the file \verb+styledcmd.sty+ in your current working directory. Otherwise you can manually install it inside your preferred \LaTeX{} compiler (for example \verb+TeXLive+ or \verb+MiKTeX+) in order to make it available for all your projects. Instructions for manually install a package can be found on Internet.
%
%Then once you've added it you can include in your project with this command:
%\begin{verbatim}
% \usepackage{styledcmd}
%\end{verbatim}
%
%\section{How do you use it?}
%You can create a formatted macro via the following command
%\begin{function}{\newstyledcmd, \renewstyledcmd, \providestyledcmd}
%\begin{syntax}
%\tn{newstyledcmd} \{\tn{\meta{macro name}}\} \marg{style name} \oarg{number of arguments} \marg{code}
%\end{syntax}
%it has the same syntax of \tn{newcommand} except for the \meta{style name} argument that specify the style. This macro alone creates commands \tn{\meta{macro name}} and \tn{\meta{macro name}}\oarg{style name} that both expand as \meta{code}.
%\end{function}
%
%The most important feature is that you can call \tn{newstyledcmd} multiple times with the same \meta{macro name} but different \meta{style name}, in this way each of \tn{\meta{macro name}}\oarg{style name} expands to \meta{code} associated to specified \meta{style name}. Notice that if you don't specify a style with just calling \tn{meta{macro name}} then it expands as the first created style, that style is the \emph{default} one for such command.
%
%As an example these commands
%\begin{verbatim}
%    \newstyledcmd{\saluto}{informal}[1]{Hi #1}
%    \newstyledcmd{\saluto}{formal}[1]{Good morning #1}
%\end{verbatim}
%define the two formats \verb+informal+ and \verb+formal+ for macro \tn{saluto}. Once you've created these two styles for \tn{saluto} you can use it with or without the style name argument, for example these commands
%\begin{verbatim}
%    \saluto{uncle}
%    \saluto[informal]{uncle}
%    \saluto[formal]{uncle}
%\end{verbatim}
%will be expanded respectively as \saluto{uncle}, \saluto[informal]{uncle}, \saluto[formal]{uncle}. With the same syntax you can use \tn{renewstyledcmd} and \tn{providestyledcmd} with the same meaning of \tn{renewcommand} and \tn{providecommand} respectively.
%
%\section{How do you change the default style?}
%In order to change the default style (the one used when you don't choose explicitily a style) you need to execute the following command
%\begin{function}{\setGlobalStyle}
%\begin{syntax}
%\tn{setGlobalStyle} \{\cs{\meta{command name}}\} \marg{new default style name}
%\end{syntax}
%\end{function}
%\setGlobalStyle{\saluto}{formal}
%
%For example in order to change the default style of command \tn{saluto} from \verb+informal+ to \verb+formal+ you need to execute command \tn{setGlobalStyle}\{\cs{saluto}\}\{\verb+formal+\}. With this command the output of preceding commands will instead be \saluto{uncle}, \saluto[informal]{uncle}, \saluto[formal]{uncle}.
%
%\section{Customize parameters with \pkg{xparse}}
%\thpkg{} loads automatically the \pkg{xparse} package for internal reasons. You can also define new styled commands with the same syntax used by  \tn{NewDocumentCommand} with the following command
%
%\begin{function}{\NewDocStyledCMD, \RenewDocStyledCMD, \ProvideDocStyledCMD}
%\begin{syntax}
%\tn{NewDocStyledCMD} \marg{command name} \marg{format name} \marg{arguments format} \marg{code}
%\end{syntax}
%\end{function}
%
%\NewDocStyledCMD{\prova}{stylea}{r<>}{Stile 1 #1}
%\NewDocStyledCMD{\prova}{styleb}{r<>}{Stile 2 #1}
%For example we can create the following two styles
%\begin{verbatim}
%     \NewDocStyledCMD{\prova}{stylea}{r<>}{Stile 1 #1}
%     \NewDocStyledCMD{\prova}{styleb}{r<>}{Stile 2 #1}
%\end{verbatim}
%in order to execute
%\begin{verbatim}
%    \prova<Hello>
%    \prova[stylea]<Hello>
%    \prova[styleb]<Hello>
%\end{verbatim}
%which are expanded respectively as \prova<Hello>; \prova[stylea]<Hello>; \prova[styleb]<Hello>. Notice that the first optional argument passed to a command defined via \tn{NewDocStyledCMD} will always be interpreted as a style argument, so you should use another syntax for optional arguments or use a mandatory argument for the first place.
%
%For example this declaration \verb+\NewDocStyledCMD{\bad}{style}{o m}{Bad declaration}+ should be avoided since for example \verb+\bad[arg1]{arg2}+ will interpret \verb+arg1+ as a style name and not as the first optional argument for \tn{bad}.
%
%\section{Expandable commands}
%Coomands created by \tn{newstyledcmd} doesn't work very well in expansion only context due to the presence of optional style argument. In order to be able to create expandable commands you should instead use
%
%\begin{function}{\newstyledcmdExp, \renewstyledcmdExp, \providestyledcmdExp}
%\begin{syntax}
%\tn{newstyledcmdExp} \{\tn{\meta{macro name}}\} \marg{style name} \oarg{number of arguments} \marg{code}
%\end{syntax}
%\end{function}
% Despite commands created with \tn{newstyledcmd} the style name of commands created by \tn{newstyledcmdExp} are always mandatory and must be passed inside curly braces. In order to use the default style just pass an empty string as style name.
%
% For example this code
%\begin{verbatim}
%    \newstyledcmdExp{\expCMD}{sty1}{Style 1}
%    \newstyledcmdExp{\expCMD}{sty2}{Style 2}
%
%    \expCMD{}
%    \expCMD{sty1}
%    \expCMD{sty2}
%\end{verbatim}
%expand as \newstyledcmdExp{\expCMD}{sty1}{Style 1}\newstyledcmdExp{\expCMD}{sty2}{Style 2} \expCMD{} \expCMD{sty1} \expCMD{sty2}
%
%\section{Advanced usage}
%If \tn{newstyledcmd}, \tn{NewDocStyledCMD} and \tn{newstyledcmdExp} aren't suitable for you it's possible to create a custom styled command generator, but we first need to know a bit of the internal structure of \thpkg.
%
% What you see as a styled command it's instead a collection of different macros:
% \begin{itemize}
%    \item multiple \emph{effective styled commands} (\emph{ES commands}), one for each style;
%    \item a single \emph{dispatch command} that's called by the user and expands to the specified ES command.
% \end{itemize}
%
% \begin{function}{\stycmd_generate:NNN}
%  \begin{syntax}
%  \cs{stycmd_generate:NNN} \meta{generator name} \meta{ES commands generator} \meta{dispatch command generator}
%  \cs{stycmd_generate:NN} \meta{generator name} \meta{ES commands generator}
%  \end{syntax}
%  Creates a generator of styled commands with name \meta{generator name}. Argument \meta{ES commands generator} is used to create ES commands and should accept a macro name as the first argument, but there aren't other restrictions on remaining arguments. Suitable ES commands generators are \tn{newcommand} and \tn{NewDocumentCommand}.
% \end{function}
%
% Argument \meta{dispatch command generator} should generate the dispatch command. Despite \meta{ES commands generator} this command must have only one parameter, a string representing the command to be created. Suitable values for this parameter are:
%
% \begin{function}{\stycmd_xparsecmd:n}
%  \begin{syntax}
%   \cs{stycmd_xparsecmd:n} \marg{command name string}
%  \end{syntax}
%  Creates the dispatch command with \tn{ProvideDocumentCommand} with optional style name parameter (used in \tn{newstyledcmd} and \tn{NewDocStyledCMD}).
%\end{function}
%
%\begin{function}{\stycmd_expcmd:n}
% \begin{syntax}
%   \cs{stycmd_expcmd:n} \marg{command name string}
% \end{syntax}
% Creates the dispatch command with \tn{providecommand} with mandatory style name parameter (used in \tn{newstyledcmdExp}).
%\end{function}
%
% If you don't specify the dispatch command generator (by using the |NN| variant) \cs{stycmd_xparsecmd:n} is used implicitly.
%
%\end{documentation}
%
%\begin{implementation}
%
%\section{Implementation}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=stycmd>
%    \end{macrocode}
%
%\begin{variable}{\c_@@_cmdproxy_str}
%Proxy used to generate styled commands
%    \begin{macrocode}
\str_const:Nx \c_@@_cmdproxy_str { \object_address:nn
    { stycmd }{ proxy } }

\proxy_create:nnN { stycmd }{ proxy } \c_object_public_str
\proxy_push_member:Vnn \c_@@_cmdproxy_str { default }{ tl }

%    \end{macrocode}
%\end{variable}
%
%\begin{macro}{\@@_cmd:n, \@@_cmd_style:nn, \@@_cmd_default:n}
%Name of a command bounded to some style.
%    \begin{macrocode}
\cs_new:Nn \@@_cmd:n
  {
    \object_address:nn{ stycmd }{ entity - #1 }
  }

\cs_new:Nn \@@_cmd_style:nn
  {
    \object_member_adr:nnn{ \@@_cmd:n{ #1 } }{ style - #2 }
      { stycmd_void }
  }

\cs_new:Nn \stycmd_void_use:N { #1 }
\cs_new_eq:NN \stycmd_void_use:c \use:c

\cs_new:Nn \@@_cmd_default:n
  {
    \object_member_adr:nn{ \@@_cmd:n{ #1 } } { default }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_xparsecmd:n}
% Defines the main macro with \cs{ProvideDocumentCommand}.
%    \begin{macrocode}

\cs_new_protected:Nn \@@_xparsecmd_aux:Nn
  {
    \ProvideDocumentCommand { #1 } { o }
      {
        \IfNoValueTF {##1}
          {
            \object_member_use:nn
              {
                \@@_cmd:n{ #2 }
              }
              {
                default
              }
          }
          {
            \object_member_use:nnn
              {
                \@@_cmd:n{ #2 }
              }
              {
                style - ##1
              }
              { stycmd_void }
          }
      }
  }

\cs_generate_variant:Nn \@@_xparsecmd_aux:Nn { cn }

\cs_new_protected:Nn \stycmd_xparsecmd:n
  {
    \@@_xparsecmd_aux:cn { #1 }{ #1 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_expcmd:n}
% Defines the main macro with \tn{providecommand} but the style argument is mandatory in order to make the command expandable. To use default style pass an empty argument as style.
%    \begin{macrocode}

\cs_new_protected:Nn \@@_expcmd_aux:Nn
  {
    \providecommand { #1 } [1]
      {
        \tl_if_empty:nTF {##1}
          {
            \object_member_use:nn
              {
                \@@_cmd:n{ #2 }
              }
              {
                default
              }
          }
          {
            \object_member_use:nnn
              {
                \@@_cmd:n{ #2 }
              }
              {
                style - ##1
              }
              { stycmd_void }
          }
      }
  }

\cs_generate_variant:Nn \@@_expcmd_aux:Nn { cn }

\cs_new_protected:Nn \stycmd_expcmd:n
  {
    \@@_expcmd_aux:cn { #1 }{ #1 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\setGlobalStyle}
%Change the default style for specified command
%    \begin{macrocode}

\cs_new_protected:Nn \@@_setdef:nN
  {

    \object_member_set:nnn
      {
        \@@_cmd:n{ #1 }
      }
      { default }
      { #2 }
  }
\cs_generate_variant:Nn \@@_setdef:nN { nc }

\cs_new_protected:Nn \@@_setdef_style:nn
  {
    \@@_setdef:nc{ #1 }
      {
        \@@_cmd_style:nn{ #1 }{ #2 }
      }
  }

\cs_generate_variant:Nn \@@_setdef_style:nn { fn }
\cs_new_protected:Nn \@@_chdef:Nn
  {
    \@@_setdef_style:fn{ \cs_to_str:N #1 }{ #2 }
  }

\NewDocumentCommand{\setGlobalStyle}{m m}
  {
    \@@_chdef:Nn #1 { #2 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_generate:NNN, \stycmd_generate:NN,  \stycmd_generate_renew:NN}
%Declare the styled version \verb+#1+ of the macro generator command \verb+#2+. the \verb+_renew+ variant requires a preceding declaration
%    \begin{macrocode}

\cs_generate_variant:Nn \@@_pars:NN { cc }

\cs_new_protected:Nn \@@_generate_aux:NNnn
  {
    \object_if_exist:nF
      {
        \@@_cmd:n{ #3 }
      }
      {
        \object_create:VnnNN \c_@@_cmdproxy_str
          { stycmd }{ entity - #3 }
          \c_object_global_str
          \c_object_public_str

        \@@_setdef_style:nn{ #3 }{ #4 }

        #2 { #3 }
      }
      \exp_args:Nc #1
        {
          \@@_cmd_style:nn{ #3 }{ #4 }
        }

  }

\cs_generate_variant:Nn \@@_generate_aux:NNnn { NNfn }

\cs_new_protected:Nn \@@_generate_aux_cmd:NNNn
  {
    \@@_generate_aux:NNfn #1 #2 { \cs_to_str:N #3 }{ #4 }
  }

\cs_new_protected:Nn \@@_generate_renew_aux:Nnn
  {
      \exp_args:Nc #1
        {
          \@@_cmd_style:nn{ #2 }{ #3 }
        }

  }

\cs_new_protected:Nn \stycmd_generate:NNN
  {
    \cs_new_protected:Npn #1 ##1 ##2
      {
        \@@_generate_aux_cmd:NNNn #2 #3 ##1 { ##2 }
      }
  }
\cs_new_protected:Nn \stycmd_generate:NN
  {
    \stycmd_generate:NNN #1 #2 \stycmd_xparsecmd:n
  }


\cs_new_protected:Nn \stycmd_generate_renew:NN
  {
    \cs_new_protected:Npn #1 ##1 ##2
      {
        \@@_generate_renew_aux:Nnn #2 { ##1 }{ ##2 }
      }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\newstyledcmd, \renewstyledcmd, \providestyledcmd}
%Declare a new macro with the specified style name.
%    \begin{macrocode}
\stycmd_generate:NN \newstyledcmd \newcommand
\stycmd_generate_renew:NN \renewstyledcmd \renewcommand
\stycmd_generate:NN \providestyledcmd \providecommand
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\NewDocStyledCMD, \RenewDocStyledCMD, \ProvideDocStyledCMD}
%Declare a new styled macro with the \tn{NewDocumentCommand} syntax.
%    \begin{macrocode}
\stycmd_generate:NN \NewDocStyledCMD \NewDocumentCommand
\stycmd_generate_renew:NN \RenewDocStyledCMD \RenewDocumentCommand
\stycmd_generate:NN \ProvideDocStyledCMD \ProvideDocumentCommand
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\newstyledcmdExp, \renewstyledcmdExp, \providestyledcmdExp}
%Declare a new macro with the specified style name.
%    \begin{macrocode}
\stycmd_generate:NNN \newstyledcmdExp \newcommand \stycmd_expcmd:n
\stycmd_generate_renew:NN \renewstyledcmdExp \renewcommand
\stycmd_generate:NNN \providestyledcmdExp \providecommand \stycmd_expcmd:n
%    \end{macrocode}
%\end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%\end{implementation}
%
%\PrintIndex

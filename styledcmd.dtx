% \iffalse meta-comment
%
%  styledcmd Handle multiple versions for user-defined macros in LaTeX
%  Copyright (C) 2021  Paolo De Donato <dedonato95@hotmail.it>
%
%  This file is part of Styledcmd.
%
%  Styledcmd is free software: you can redistribute it and/or modify
%  it under the terms of the GNU General Public License as published by
%  the Free Software Foundation, either version 3 of the License, or
%  (at your option) any later version.
%
%  Styledcmd is distributed in the hope that it will be useful,
%  but WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%  GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with Styledcmd.  If not, see <https://www.gnu.org/licenses/>.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{styledcmd.dtx}[2022/08/03 1.2 Command with different styles]
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\RequirePackage{expl3}[2022-04-10]
%<package>\ProvidesExplPackage{styledcmd}{2022/08/03}{1.2}{Command with different styles}
%<package>\RequirePackage{lt3rawobjects}
%<package>\RequirePackage{xparse}
%<*driver>
\documentclass[full]{l3doc}
\usepackage{styledcmd}
\begin{document}
\DocInput{styledcmd.dtx}
\end{document}
%</driver>
% \fi
%
%\newstyledcmd{\saluto}{informal}[1]{Hi #1}
%\newstyledcmd{\saluto}{formal}[1]{Good morning #1}
%
%\newcommand{\thpkg}{\pkg{styledcmd}}
%
%\title{styledcmd}
%\author{Paolo De Donato}
%\date{03 August 2022}
%
%\maketitle
%
%\begin{documentation}
%
%\thpkg{} is a \LaTeX{} package that allows you to create and manage different versions of your macro in order to be able to choose the better style for every occasion and avoid rewriting code each time.

%\section{How can you include it in your project?}
%You need only to have the file \verb+styledcmd.sty+ in your current working directory. Otherwise you can manually install it inside your preferred \LaTeX{} compiler (for example \verb+TeXLive+ or \verb+MiKTeX+) in order to make it available for all your projects. Instructions for manually install a package can be found on Internet.
%
%Then once you've added it you can include in your project with this command:
%\begin{verbatim}
% \usepackage{styledcmd}
%\end{verbatim}
%
%\section{How do you use it?}
%You can create a formatted macro via the following command
%\begin{function}{\newstyledcmd, \renewstyledcmd, \providestyledcmd}
%\begin{syntax}
%|\newstyledcmd| \marg{macro name} \marg{format name} \oarg{number of arguments} \marg{code}
%\end{syntax}
%\end{function}
%
%You can repeat that command for the same macro in order to create different styles, for example these commands
%\begin{verbatim}
%    \newstyledcmd{\saluto}{informal}[1]{Hi #1}
%    \newstyledcmd{\saluto}{formal}[1]{Good morning #1}
%\end{verbatim}
%define the two formats \verb+informal+ and \verb+formal+ for macro \tn{saluto}. You can directly use the command \tn{saluto} and use the default format (the first declared one) or using a specific style by passing it as an optional argument. So commands
%\begin{verbatim}
%    \saluto{uncle}
%    \saluto[informal]{uncle}
%    \saluto[formal]{uncle}
%\end{verbatim}
%will be expanded respectively as \saluto{uncle}, \saluto[informal]{uncle}, \saluto[formal]{uncle}. With the same syntax you can use \tn{renewstyledcmd} and \tn{providestyledcmd} with the same meaning of \tn{renewcommand} and \tn{providecommand} respectively.
%
%\section{How do you change the default style?}
%In order to change the default style (the one used when you don't choose explicitily a format) you need to execute the following command
%\begin{function}{\setGlobalStyle}
%\begin{syntax}
%|\setGlobalStyle| \marg{command name} \marg{new default format name}
%\end{syntax}
%\end{function}
%\setGlobalStyle{\saluto}{formal}
%
%For example in order to change the default style of command \tn{saluto} from \verb+informal+ to \verb+formal+ you need to execute command \verb+\setGlobalStyle{\saluto}{formal}+. With this command the output of preceding commands will instead be \saluto{uncle}, \saluto[informal]{uncle}, \saluto[formal]{uncle}.
%
%\section{Customize parameters with \pkg{xparse}}
%\thpkg{} loads automatically the \pkg{xparse} package for internal reasons. You can also define new styled commands with the same syntax used by  \tn{NewDocumentCommand} with the following command
%
%\begin{function}{\NewDocStyledCMD, \RenewDocStyledCMD, \ProvideDocStyledCMD}
%\begin{syntax}
%|\NewDocStyledCMD| \marg{command name} \marg{format name} \marg{arguments format} \marg{code}
%\end{syntax}
%\end{function}
%
%\NewDocStyledCMD{\prova}{stylea}{r<>}{Stile 1 #1}
%\NewDocStyledCMD{\prova}{styleb}{r<>}{Stile 2 #1}
%For example we can create the following two styles
%\begin{verbatim}
%     \NewDocStyledCMD{\prova}{stylea}{r<>}{Stile 1 #1}
%     \NewDocStyledCMD{\prova}{styleb}{r<>}{Stile 2 #1}
%\end{verbatim}
%in order to execute
%\begin{verbatim}
%    \prova<Hello>
%    \prova[stylea]<Hello>
%    \prova[styleb]<Hello>
%\end{verbatim}
%which are expanded respectively as \prova<Hello>; \prova[stylea]<Hello>; \prova[styleb]<Hello>. Notice that the first optional argument passed to a command defined via \tn{NewDocStyleCMD} will always be interpreted as a style argument, so you should use another syntax for optional arguments or use a mandatory argument for the first place.
%
%For example this declaration \verb+\NewDocStyledCMD{\bad}{style}{o m}{Bad declaration}+ should be avoided since for example \verb+\bad[arg1]{arg2}+ will interpret \verb+arg1+ as a style name and not as the first optional argument for \tn{bad}.
%
%
%\end{documentation}
%
%\begin{implementation}
%
%\section{Implementation}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=stycmd>
%    \end{macrocode}
%
%\begin{variable}{\c_@@_cmdproxy_str}
%Proxy used to generate styled commands
%    \begin{macrocode}
\str_const:Nx \c_@@_cmdproxy_str { \object_address:nn
    { stycmd }{ proxy } }

\proxy_create:nnN { stycmd }{ proxy } \c_object_public_str
\proxy_push_member:Vnn \c_@@_cmdproxy_str { default }{ tl }

%    \end{macrocode}
%\end{variable}
%
%\begin{macro}{\@@_cmd:n, \@@_cmd_style:nn, \@@_cmd_default:n}
%Name of a command bounded to some style.
%    \begin{macrocode}
\cs_new:Nn \@@_cmd:n
  {
    \object_address:nn{ stycmd }{ entity - #1 }
  }

\cs_new:Nn \@@_cmd_style:nn
  {
    \object_member_adr:nnn{ \@@_cmd:n{ #1 } }{ cmd - #2 }
      { stycmd_void }
  }

\cs_new:Nn \stycmd_void_use:N { #1 }
\cs_new_eq:NN \stycmd_void_use:c \use:c

\cs_new:Nn \@@_cmd_default:n
  {
    \object_member_adr:nn{ \@@_cmd:n{ #1 } } { default }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_xparsecmd:n}
% Defines the main macro with \cs{ProvideDocumentCommand}.
%    \begin{macrocode}

\cs_new_protected:Nn \@@_xparsecmd_aux:Nn
  {
    \ProvideDocumentCommand { #1 } { o }
      {
        \IfNoValueTF {##1}
          {
            \object_member_use:nn
              {
                \@@_cmd:n{ #2 }
              }
              {
                default
              }
          }
          {
            \object_member_use:nnn
              {
                \@@_cmd:n{ #2 }
              }
              {
                cmd - ##1
              }
              { stycmd_void }
          }
      }
  }

\cs_generate_variant:Nn \@@_xparsecmd_aux:Nn { cn }

\cs_new_protected:Nn \stycmd_xparsecmd:n
  {
    \@@_xparsecmd_aux:cn { #1 }{ #1 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_pcmcmd:n}
% Defines the main macro with \cs{providecommand}.
%    \begin{macrocode}

\cs_new_protected:Nn \@@_pcmcmd_aux:Nn
  {
    \providecommand { #1 } [1] []
      {
        \tl_if_empty:nTF {##1}
          {
            \object_member_use:nn
              {
                \@@_cmd:n{ #2 }
              }
              {
                default
              }
          }
          {
            \object_member_use:nnn
              {
                \@@_cmd:n{ #2 }
              }
              {
                cmd - ##1
              }
              { stycmd_void }
          }
      }
  }

\cs_generate_variant:Nn \@@_pcmcmd_aux:Nn { cn }

\cs_new_protected:Nn \stycmd_pcmcmd:n
  {
    \@@_pcmcmd_aux:cn { #1 }{ #1 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_expcmd:n}
% Defines the main macro with \cs{providecommand} but the style argument is mandatory in order to make the command expandable. To use default style pass an empty argument as style.
%    \begin{macrocode}

\cs_new_protected:Nn \@@_expcmd_aux:Nn
  {
    \providecommand { #1 } [1]
      {
        \tl_if_empty:nTF {##1}
          {
            \object_member_use:nn
              {
                \@@_cmd:n{ #2 }
              }
              {
                default
              }
          }
          {
            \object_member_use:nnn
              {
                \@@_cmd:n{ #2 }
              }
              {
                cmd - ##1
              }
              { stycmd_void }
          }
      }
  }

\cs_generate_variant:Nn \@@_expcmd_aux:Nn { cn }

\cs_new_protected:Nn \stycmd_expcmd:n
  {
    \@@_expcmd_aux:cn { #1 }{ #1 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\setGlobalStyle}
%Change the default style for specified command
%    \begin{macrocode}

\NewDocumentCommand{\setGlobalStyle}{m m}
  {
    \@@_chdef:Nn #1 { #2 }
  }

\cs_new_protected:Nn \@@_chdef_named:nn
  {
    \@@_pars:cc
      {
        \object_member_adr:nn
          {
            \@@_cmd:n{ #1 }
          }
          { default }
      }
      {
        \object_member_adr:nnn
          {
            \@@_cmd:n{ #1 }
          }
          {
            cmd - #2
          }
          { stycmd_void }
      }
  }
\cs_generate_variant:Nn \@@_chdef_named:nn { fn }
\cs_new_protected:Nn \@@_chdef:Nn
  {
    \@@_chdef_named:fn{ \cs_to_str:N #1 }{ #2 }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\stycmd_generate:NNN, \stycmd_generate:NN,  \stycmd_generate_renew:NN}
%Declare the styled version \verb+#1+ of the macro generator command \verb+#2+. the \verb+_renew+ variant requires a preceding declaration
%    \begin{macrocode}

\cs_new:Nn \@@_pars:NN
  {
    \tl_gset:Nn #1 { #2 }
  }

\cs_generate_variant:Nn \@@_pars:NN { cc }

\cs_new_protected:Nn \@@_generate_aux:NNnn
  {
    \object_if_exist:nF
      {
        \@@_cmd:n{ #3 }
      }
      {
        \object_create:VnnNN \c_@@_cmdproxy_str
          { stycmd }{ entity - #3 }
          \c_object_global_str
          \c_object_public_str

        \@@_pars:cc
          {
            \object_member_adr:nn
              {
                \@@_cmd:n{ #3 }
              }
              { default }
          }
          {
            \object_member_adr:nnn
              {
                \@@_cmd:n{ #3 }
              }
              {
                cmd - #4
              }
              { stycmd_void }
          }

        #2 { #3 }
      }
      \exp_args:Nc #1
        {
          \object_member_adr:nnn
            {
              \@@_cmd:n{ #3 }
            }
            {
              cmd - #4
            }
            { stycmd_void }
        }

  }

\cs_generate_variant:Nn \@@_generate_aux:NNnn { NNfn }

\cs_new_protected:Nn \@@_generate_aux_cmd:NNNn
  {
    \@@_generate_aux:NNfn #1 #2 { \cs_to_str:N #3 }{ #4 }
  }

\cs_new_protected:Nn \@@_generate_renew_aux:Nnn
  {
      \exp_args:Nc #1
        {
          \object_member_adr:nnn
            {
              \@@_cmd:n{ #2 }
            }
            {
              cmd - #3
            }
            { stycmd_void }
        }

  }

\cs_new_protected:Nn \stycmd_generate:NNN
  {
    \cs_new_protected:Npn #1 ##1 ##2
      {
        \@@_generate_aux_cmd:NNNn #2 #3 ##1 { ##2 }
      }
  }
\cs_new_protected:Nn \stycmd_generate:NN
  {
    \stycmd_generate:NNN #1 #2 \stycmd_xparsecmd:n
  }


\cs_new_protected:Nn \stycmd_generate_renew:NN
  {
    \cs_new_protected:Npn #1 ##1 ##2
      {
        \@@_generate_renew_aux:Nnn #2 { ##1 }{ ##2 }
      }
  }

%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\newstyledcmd, \renewstyledcmd, \providestyledcmd}
%Declare a new macro with the specified style name.
%    \begin{macrocode}
\stycmd_generate:NN \newstyledcmd \newcommand
\stycmd_generate_renew:NN \renewstyledcmd \renewcommand
\stycmd_generate:NN \providestyledcmd \providecommand
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\NewDocStyledCMD, \RenewDocStyledCMD, \ProvideDocStyledCMD}
%Declare a new styled macro with the \tn{NewDocumentCommand} syntax.
%    \begin{macrocode}
\stycmd_generate:NN \NewDocStyledCMD \NewDocumentCommand
\stycmd_generate_renew:NN \RenewDocStyledCMD \RenewDocumentCommand
\stycmd_generate:NN \ProvideDocStyledCMD \ProvideDocumentCommand
%    \end{macrocode}
%\end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%\end{implementation}
%
%\PrintIndex
